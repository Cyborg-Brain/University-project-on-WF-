//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Data.Entity.Infrastructure.MappingViews;

[assembly: DbMappingViewCacheTypeAttribute(
    typeof(Testing.Domain.Entities.Infrastructure.ApplicationContext),
    typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySets15d8187c88cf4c55790cd73baf0400f3dab226b98db0f9f887ade05112ee1554))]

namespace Edm_EntityMappingGeneratedViews
{
    using System;
    using System.CodeDom.Compiler;
    using System.Data.Entity.Core.Metadata.Edm;

    /// <summary>
    /// Implements a mapping view cache.
    /// </summary>
    [GeneratedCode("Entity Framework 6 Power Tools", "0.9.2.0")]
    internal sealed class ViewsForBaseEntitySets15d8187c88cf4c55790cd73baf0400f3dab226b98db0f9f887ade05112ee1554 : DbMappingViewCache
    {
        /// <summary>
        /// Gets a hash value computed over the mapping closure.
        /// </summary>
        public override string MappingHashValue
        {
            get { return "15d8187c88cf4c55790cd73baf0400f3dab226b98db0f9f887ade05112ee1554"; }
        }

        /// <summary>
        /// Gets a view corresponding to the specified extent.
        /// </summary>
        /// <param name="extent">The extent.</param>
        /// <returns>The mapping view, or null if the extent is not associated with a mapping view.</returns>
        public override DbMappingView GetView(EntitySetBase extent)
        {
            if (extent == null)
            {
                throw new ArgumentNullException("extent");
            }

            var extentName = extent.EntityContainer.Name + "." + extent.Name;

            if (extentName == "CodeFirstDatabase.Group")
            {
                return GetView0();
            }

            if (extentName == "ApplicationContext.Groups")
            {
                return GetView1();
            }

            if (extentName == "CodeFirstDatabase.Person")
            {
                return GetView2();
            }

            if (extentName == "ApplicationContext.Persons")
            {
                return GetView3();
            }

            if (extentName == "CodeFirstDatabase.Schedule")
            {
                return GetView4();
            }

            if (extentName == "ApplicationContext.Schedule")
            {
                return GetView5();
            }

            if (extentName == "CodeFirstDatabase.Subject")
            {
                return GetView6();
            }

            if (extentName == "ApplicationContext.Subjects")
            {
                return GetView7();
            }

            return null;
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Group.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView0()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Group
        [CodeFirstDatabaseSchema.Group](T1.Group_Id, T1.Group_Name, T1.Group_IdLecturer)
    FROM (
        SELECT 
            T.Id AS Group_Id, 
            T.Name AS Group_Name, 
            T.IdLecturer AS Group_IdLecturer, 
            True AS _from0
        FROM ApplicationContext.Groups AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ApplicationContext.Groups.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView1()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Groups
        [Testing.Domain.Entities.Infrastructure.Group](T1.Group_Id, T1.Group_Name, T1.Group_IdLecturer)
    FROM (
        SELECT 
            T.Id AS Group_Id, 
            T.Name AS Group_Name, 
            T.IdLecturer AS Group_IdLecturer, 
            True AS _from0
        FROM CodeFirstDatabase.[Group] AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Person.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView2()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Person
        [CodeFirstDatabaseSchema.Person](T1.Person_Id, T1.Person_Email, T1.Person_Name, T1.Person_Surname, T1.Person_Birthday, T1.Person_SexInt, T1.Person_Password, T1.Person_StatusInt, T1.Person_ExamBook, T1.Person_Course, T1.Person_AverageMark, T1.Person_IdGroup, T1.Person_Experience, T1.Person_Subjects)
    FROM (
        SELECT 
            T.Id AS Person_Id, 
            T.Email AS Person_Email, 
            T.Name AS Person_Name, 
            T.Surname AS Person_Surname, 
            T.Birthday AS Person_Birthday, 
            T.SexInt AS Person_SexInt, 
            T.Password AS Person_Password, 
            T.StatusInt AS Person_StatusInt, 
            T.ExamBook AS Person_ExamBook, 
            T.Course AS Person_Course, 
            T.AverageMark AS Person_AverageMark, 
            T.IdGroup AS Person_IdGroup, 
            T.Experience AS Person_Experience, 
            T.Subjects AS Person_Subjects, 
            True AS _from0
        FROM ApplicationContext.Persons AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ApplicationContext.Persons.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView3()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Persons
        [Testing.Domain.Entities.Infrastructure.Person](T1.Person_Id, T1.Person_Email, T1.Person_Name, T1.Person_Surname, T1.Person_Birthday, T1.Person_SexInt, T1.Person_Password, T1.Person_StatusInt, T1.Person_ExamBook, T1.Person_Course, T1.Person_AverageMark, T1.Person_IdGroup, T1.Person_Experience, T1.Person_Subjects)
    FROM (
        SELECT 
            T.Id AS Person_Id, 
            T.Email AS Person_Email, 
            T.Name AS Person_Name, 
            T.Surname AS Person_Surname, 
            T.Birthday AS Person_Birthday, 
            T.SexInt AS Person_SexInt, 
            T.Password AS Person_Password, 
            T.StatusInt AS Person_StatusInt, 
            T.ExamBook AS Person_ExamBook, 
            T.Course AS Person_Course, 
            T.AverageMark AS Person_AverageMark, 
            T.IdGroup AS Person_IdGroup, 
            T.Experience AS Person_Experience, 
            T.Subjects AS Person_Subjects, 
            True AS _from0
        FROM CodeFirstDatabase.Person AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Schedule.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView4()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Schedule
        [CodeFirstDatabaseSchema.Schedule](T1.Schedule_Id, T1.Schedule_DayInt, T1.Schedule_NumSubject, T1.Schedule_IdSubject, T1.Schedule_IdGroup, T1.Schedule_IdLecturer)
    FROM (
        SELECT 
            T.Id AS Schedule_Id, 
            T.DayInt AS Schedule_DayInt, 
            T.NumSubject AS Schedule_NumSubject, 
            T.IdSubject AS Schedule_IdSubject, 
            T.IdGroup AS Schedule_IdGroup, 
            T.IdLecturer AS Schedule_IdLecturer, 
            True AS _from0
        FROM ApplicationContext.Schedule AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ApplicationContext.Schedule.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView5()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Schedule
        [Testing.Domain.Entities.Infrastructure.Schedule](T1.Schedule_Id, T1.Schedule_DayInt, T1.Schedule_NumSubject, T1.Schedule_IdSubject, T1.Schedule_IdGroup, T1.Schedule_IdLecturer)
    FROM (
        SELECT 
            T.Id AS Schedule_Id, 
            T.DayInt AS Schedule_DayInt, 
            T.NumSubject AS Schedule_NumSubject, 
            T.IdSubject AS Schedule_IdSubject, 
            T.IdGroup AS Schedule_IdGroup, 
            T.IdLecturer AS Schedule_IdLecturer, 
            True AS _from0
        FROM CodeFirstDatabase.Schedule AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Subject.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView6()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Subject
        [CodeFirstDatabaseSchema.Subject](T1.Subject_Id, T1.Subject_Name)
    FROM (
        SELECT 
            T.Id AS Subject_Id, 
            T.Name AS Subject_Name, 
            True AS _from0
        FROM ApplicationContext.Subjects AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ApplicationContext.Subjects.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView7()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Subjects
        [Testing.Domain.Entities.Infrastructure.Subject](T1.Subject_Id, T1.Subject_Name)
    FROM (
        SELECT 
            T.Id AS Subject_Id, 
            T.Name AS Subject_Name, 
            True AS _from0
        FROM CodeFirstDatabase.Subject AS T
    ) AS T1");
        }
    }
}
